Edits to apply to design-architecture.org
 - In * Photos â†’ ** The architecture (what works best), replace the first bullet with:
 - Store images in object storage + CDN (not in the repo): Cloudinary (chosen), ImageKit, or Supabase Storage. For this portfolio we will use Cloudinary with a named transform (t_gallery) for smart crops and auto-optimization (AVIF/WebP, quality), so you don't rebuild the site every time you add photos. ([Cloudinary Docs][10])
 - In the same list, update the "responsive images & lazy-loading" bullet to:
 - Lean on responsive images & lazy-loading. In Astro, the built-in image tools are great for local assets; for remote/CDN images, offload transforms to your provider (Cloudinary/ImageKit) and still use <img loading="lazy"> + srcset/sizes in your templates. ([Astro Docs][8], [Cloudinary Docs][11])
 - In ** Why not put photos in the repo?, change the second bullet to:
 - Astro's optimizer targets local images; for remote stores you should offload transforms to Cloudinary/ImageKit/Supabase and let the CDN handle resizing/format/quality. ([Astro Docs][8], [Cloudinary Docs][11])
 - Rename ** Concrete setup (Supabase-first) â†’ ** Concrete setup (Cloudinary-first) and replace its numbered list with:
 1. Named Transformation
 - In the Cloudinary Console â†’ Settings â†’ Transformations create a named transformation called gallery with:
 - c_fill --- fill target box
 - g_auto --- smart gravity (auto-hotspot)
 - f_auto --- modern formats (WebP/AVIF)
 - q_auto --- automatic quality
 - Optional: ar_4:3 or ar_3:2 to enforce aspect ratio; optional b_auto:border for subtle borders. Your transform is referenced as t_gallery.
 2. Albums as content
 - Use a src/content/albums/ collection that lists Cloudinary publicId values instead of local file paths. Keep title/date/tags/alt text as before.
 3. Gallery UI
 - Use CSS columns or native masonry for the grid; render thumbnails at multiple widths via srcset built from Cloudinary URLs using t_gallery. Add PhotoSwipe for fullscreen viewing and keyboard/swipe nav. ([PhotoSwipe][12])
 4. Responsive source sets
 - For each image, generate a srcset at widths like 480/768/1024/1600/2200 and let the browser pick. Cloudinary serves optimized AVIF/WebP and quality automatically via f_auto,q_auto. ([Cloudinary Docs][11])
 5. Performance & SEO
 - Paginate long albums; add CollectionPage structured data and sitemap entries; preload only the first-viewport thumbnails. Preconnect to https://res.cloudinary.com.
 - In ** Nice extras, replace the LQIP bullet with:
 - Dominant-color or blur placeholders: either render a tiny 8-16px Cloudinary variant (e.g., w_20,e_blur:2000) or use a dominant color as background to prevent CLS. ([Cloudinary Docs][11])
 - Change the heading ** If you prefer Cloudinary/ImageKit instead to ** If you prefer ImageKit or Supabase instead, and update its first line to:
 - Similar flow: store originals, render with transformation URLs (e.g., f_avif,q_auto,w_...). Both ImageKit and Supabase offer on-the-fly transforms; Cloudinary remains primary for this site. (Uploadcare has a good Astro guide if you want a hosted uploader.) ([Uploadcare][9])
 - In ** Quick decision tree, update the "hundreds/thousands" bullet to:
 - Hundreds/thousands of photos, frequent updates? Use Cloudinary (CDN + on-the-fly transforms), albums as Content Collections, PhotoSwipe lightbox, and a masonry layout. ([Cloudinary Docs][11], [Astro Docs][2], [launchfa.st][3])
 - In the * Cloudinary section, fix the broken URL snippet after "This gives you URLs like:" to an Org example block:

#+BEGIN_EXAMPLE
https://res.cloudinary.com/<cloud>/image/upload/t_gallery,w_1600/events/tiff_2025/IMG_1234.jpg
#+END_EXAMPLE


 - Normalize Org code fences in that Cloudinary section: use uppercase #+BEGIN_SRC ... / #+END_SRC for all blocks (ts, astro, bash, etc.).
 - Replace the Technology Stack table with bullets (you prefer no tables):
 - Site Generator: Astro v5.13.2 --- Static site generation
 - Image Delivery: Cloudinary (t_gallery: c_fill,g_auto,f_auto,q_auto)
 - Layout System: CSS Grid / Masonry (CSS columns fallback)
 - Lightbox: PhotoSwipe v5+
 - Styling: Tailwind CSS v4.0.14
 - Build Tool: Vite
 - Package Manager: npm
 - Hosting Target: Vercel
 - Domain: photos.jaydixit.com
 - In * Performance Optimizations â†’ ** Image Handling, replace bullets with:
 - Loading: Lazy loading with loading="lazy" + responsive srcset/sizes
 - Formats & Quality: Cloudinary f_auto,q_auto for AVIF/WebP + optimal quality
 - Sizing & Cropping: Cloudinary c_fill,g_auto to frame subjects consistently
 - In * Design Decisions â†’ * Why Folder-Based?, update the bullets to reflect Cloudinary assets:
 - Simplicity: Metadata and routes are file-driven (Content Collections), while assets live in Cloudinary
 - Version Control: Album metadata (JSON/MD/MDX) tracked in git; no massive binaries in the repo
 - Scalability: Easy to add albums by adding content files that reference Cloudinary public IDs
 - Portability: Minimal vendor lock-in; you can swap CDNs by changing the URL helper
 - In * Photo Organization System â†’ ** Folder Structure, add this note above the example block:
 - Note: With Cloudinary-first, the source of truth is album metadata (public IDs). Local public/photos folders are optional for development or legacy import.
 - In * ðŸš§ Remaining Implementation Items â†’ ** External Service Integration, add a new first bullet:
 - Cloudinary Setup: Create named transform t_gallery; add PUBLIC_CLOUDINARY_CLOUD_NAME to .env; verify delivery URLs and preconnect.
 - Append new link references after [9]::
 - [10]: https://cloudinary.com/documentation/image_transformations?utm_source=chatgpt.com "Image transformations --- Cloudinary"
 - [11]: https://cloudinary.com/documentation/responsive_images?utm_source=chatgpt.com "Responsive images, f_auto / q_auto --- Cloudinary"
 - [12]: https://photoswipe.com/ "PhotoSwipe"
