---
import MainLayout from '../layouts/MainLayout.astro';
// Import image configuration
import { images } from '../data/homepage-images.js';

// Set this to false to use your manual image order from homepage-images.js
// Set to true to automatically optimize order to minimize gaps
const AUTO_OPTIMIZE_ORDER = true;

// Algorithm to optimize image order for minimal gaps
function optimizeImageOrder(images) {
  // In AUTO_OPTIMIZE_ORDER, ignore manual order and treat all as unordered
  const orderedImages = [];
  const unorderedImages = images.slice();
  
  // Sort ordered images by their order value
  orderedImages.sort((a, b) => a.order - b.order);
  
  // If no unordered images, just return the ordered ones
  if (unorderedImages.length === 0) {
    return orderedImages;
  }
  
  // Optimize the unordered images
  const sizeGroups = {
    xlportrait: [], // 2x2 - largest, place first for anchor points
    landscape: [],  // 2x1 - horizontal images
    portrait: []    // 1x1 - standard portrait, use to fill gaps
  };
  
  unorderedImages.forEach(img => {
    sizeGroups[img.size].push(img);
  });
  
  const optimizedUnordered = [];
  
  // Strategy: Follow specific pattern for top of page, then distribute remaining items
  
  // Pattern for top section:
  // Row 1: 2 portraits (stacked), xlportrait, 2 portraits (stacked), xlportrait
  // Row 2: xlportrait, landscape (above another xlportrait), landscape
  
  // Row 1 implementation
  // First column: 2 portraits stacked (composite item)
  if (sizeGroups.portrait.length >= 2) {
    const p1 = sizeGroups.portrait.shift();
    const p2 = sizeGroups.portrait.shift();
    optimizedUnordered.push({ type: 'stacked', items: [p1, p2] });
  } else if (sizeGroups.portrait.length === 1) {
    optimizedUnordered.push(sizeGroups.portrait.shift());
  }
  
  // Second column: xlportrait
  if (sizeGroups.xlportrait.length > 0) {
    optimizedUnordered.push(sizeGroups.xlportrait.shift());
  }
  
  // Third column: 2 portraits stacked (composite item)
  if (sizeGroups.portrait.length >= 2) {
    const p3 = sizeGroups.portrait.shift();
    const p4 = sizeGroups.portrait.shift();
    optimizedUnordered.push({ type: 'stacked', items: [p3, p4] });
  } else {
    while (sizeGroups.portrait.length > 0) {
      optimizedUnordered.push(sizeGroups.portrait.shift());
    }
  }
  
  // Fourth column: xlportrait
  if (sizeGroups.xlportrait.length > 0) {
    optimizedUnordered.push(sizeGroups.xlportrait.shift());
  }
  
  // Row 2 implementation
  // First: xlportrait
  if (sizeGroups.xlportrait.length > 0) {
    optimizedUnordered.push(sizeGroups.xlportrait.shift());
  }
  
  // Second: landscape
  if (sizeGroups.landscape.length > 0) {
    optimizedUnordered.push(sizeGroups.landscape.shift());
  }
  
  // Third: another landscape
  if (sizeGroups.landscape.length > 0) {
    optimizedUnordered.push(sizeGroups.landscape.shift());
  }
  
  // Now continue with remaining items, distributing xlportraits with spacing
  const totalXl = sizeGroups.xlportrait.length;
  const totalOtherItems = sizeGroups.portrait.length + sizeGroups.landscape.length;
  const minSpacing = totalXl > 0 ? Math.max(4, Math.floor(totalOtherItems / (totalXl + 1))) : 0;
  
  let itemsSinceLastXl = 0;
  
  // Place remaining items with xlportraits distributed
  while (sizeGroups.portrait.length > 0 || sizeGroups.landscape.length > 0 || sizeGroups.xlportrait.length > 0) {
    
    // Check if we should place an xlportrait (with proper spacing)
    if (sizeGroups.xlportrait.length > 0 && itemsSinceLastXl >= minSpacing) {
      // Place some portraits before xlportrait
      for (let i = 0; i < 2 && sizeGroups.portrait.length > 0; i++) {
        optimizedUnordered.push(sizeGroups.portrait.shift());
      }
      
      // Place the xlportrait
      optimizedUnordered.push(sizeGroups.xlportrait.shift());
      itemsSinceLastXl = 0;
      
      // Place some portraits after xlportrait
      for (let i = 0; i < 2 && sizeGroups.portrait.length > 0; i++) {
        optimizedUnordered.push(sizeGroups.portrait.shift());
      }
      
      // Add a landscape if available
      if (sizeGroups.landscape.length > 0) {
        optimizedUnordered.push(sizeGroups.landscape.shift());
        itemsSinceLastXl++;
      }
    } else {
      // Add regular items between xlportraits
      
      // Add portraits in small batches
      const portraitBatch = Math.min(2, sizeGroups.portrait.length);
      for (let i = 0; i < portraitBatch; i++) {
        if (sizeGroups.portrait.length > 0) {
          optimizedUnordered.push(sizeGroups.portrait.shift());
          itemsSinceLastXl++;
        }
      }
      
      // Add landscape
      if (sizeGroups.landscape.length > 0) {
        optimizedUnordered.push(sizeGroups.landscape.shift());
        itemsSinceLastXl++;
      }
    }
    
    // Safety: place remaining xlportraits if we're running low on other items
    if (sizeGroups.xlportrait.length > 0 && 
        sizeGroups.portrait.length + sizeGroups.landscape.length < 2) {
      while (sizeGroups.xlportrait.length > 0) {
        optimizedUnordered.push(sizeGroups.xlportrait.shift());
      }
    }
  }
  
  // Merge ordered and optimized unordered images
  const result = [];
  let orderedIndex = 0;
  let unorderedIndex = 0;
  
  // Place images according to order values, filling gaps with optimized unordered
  for (let position = 1; orderedIndex < orderedImages.length || unorderedIndex < optimizedUnordered.length; position++) {
    // Check if there's an ordered image for this position
    if (orderedIndex < orderedImages.length && orderedImages[orderedIndex].order === position) {
      result.push(orderedImages[orderedIndex]);
      orderedIndex++;
    } else if (unorderedIndex < optimizedUnordered.length) {
      // Fill with optimized unordered image
      result.push(optimizedUnordered[unorderedIndex]);
      unorderedIndex++;
    }
  }
  
  // Post-pass: break up long runs of portrait-width columns
  // Treat both single portraits and stacked pairs as portrait-width columns
  function isPortraitColumn(item) {
    if (!item) return false;
    if (item.type === 'stacked') return true;
    return !item.type && item.size === 'portrait';
  }
  function isXlPortrait(item) {
    return item && !item.type && item.size === 'xlportrait';
  }
  function isLandscape(item) {
    return item && !item.type && item.size === 'landscape';
  }
  
  let i = 0;
  while (i < result.length) {
    // Find a run of consecutive portrait-width columns
    if (!isPortraitColumn(result[i])) { i++; continue; }
    const start = i;
    let end = i;
    while (end < result.length && isPortraitColumn(result[end])) end++;
    const runLen = end - start;
    
    // If there are too many portrait-width columns in a row, insert a wide item in the middle
    if (runLen >= 6) {
      // Prefer an xlportrait; fallback to a landscape
      let xlIndex = -1;
      for (let k = end; k < result.length; k++) {
        if (isXlPortrait(result[k])) { xlIndex = k; break; }
      }
      // If none after, try before the run
      if (xlIndex === -1) {
        for (let k = start - 1; k >= 0; k--) {
          if (isXlPortrait(result[k])) { xlIndex = k; break; }
        }
      }
      // If still none, try landscape
      let wideWasLandscape = false;
      if (xlIndex === -1) {
        for (let k = end; k < result.length; k++) {
          if (isLandscape(result[k])) { xlIndex = k; wideWasLandscape = true; break; }
        }
        if (xlIndex === -1) {
          for (let k = start - 1; k >= 0; k--) {
            if (isLandscape(result[k])) { xlIndex = k; wideWasLandscape = true; break; }
          }
        }
      }

      if (xlIndex !== -1) {
        const [wide] = result.splice(xlIndex, 1);
        // Build portrait-width columns for this run by pairing single portraits into stacked columns
        const segment = result.slice(start, end);
        const columns = [];
        let carry = null;
        for (const it of segment) {
          if (it && it.type === 'stacked') {
            // flush carry as single column before pushing stacked column
            if (carry) { columns.push(carry); carry = null; }
            columns.push(it);
          } else if (it && !it.type && it.size === 'portrait') {
            if (!carry) {
              carry = it; // hold until we have a pair
            } else {
              columns.push({ type: 'stacked', items: [carry, it] });
              carry = null;
            }
          } else {
            // Non-portrait shouldn't be in this run, but guard anyway
            if (carry) { columns.push(carry); carry = null; }
            columns.push(it);
          }
        }
        if (carry) { columns.push(carry); carry = null; }

        // Decide insertion point at column level
        const splitCols = columns.length >= 8 ? 4 : Math.floor(columns.length / 2);
        const leftCols = columns.slice(0, splitCols);
        const rightCols = columns.slice(splitCols);
        const rebuilt = [...leftCols, wide, ...rightCols];

        // Replace the original segment with rebuilt columns back into flat items
        const flat = [];
        for (const col of rebuilt) {
          if (col && col.type === 'stacked') {
            flat.push(col); // render as a single item (we have renderer for stacked)
          } else {
            flat.push(col);
          }
        }

        // Splice back into result
        result.splice(start, end - start, ...flat);
        // Move i past the rebuilt block
        i = start + flat.length;
        continue;
      }
    }
    
    i = end; // skip past this run
  }
  
  return result;
}

// Decide whether to optimize or use manual order
const processedImages = AUTO_OPTIMIZE_ORDER ? optimizeImageOrder(images) : images;

// Helper to map a single image to render data
function mapSingle(img) {
  return {
    src: `/highlights/${img.filename}`,
    filename: img.filename,
    caption: img.caption || img.filename.replace(/[-_]/g, ' ').replace(/\.\w+$/, ''),
    size: img.size
  };
}
---

<MainLayout>
  <div class="portfolio-wrap">
    <div id="masonry" class="masonry-items elastic" data-col-num="elastic" data-gutter="8px" data-starting-filter="*" data-masonry-type="photography">
      <div class="grid-sizer"></div>
      {processedImages.map((item, index) => {
        if (item && item.type === 'stacked' && Array.isArray(item.items)) {
          const a = mapSingle(item.items[0]);
          const b = mapSingle(item.items[1] || item.items[0]);
          return (
            <article class="masonry-item wide_tall" data-idx={index}>
              <div class="stacked-pair">
                <a class="masonry-link portfolio-lightbox" href={a.src}>
                  <img src={a.src} alt={a.caption} loading="lazy" data-caption={a.caption} />
                  <div class="caption-overlay">
                    <h3>{a.caption}</h3>
                  </div>
                </a>
                <a class="masonry-link portfolio-lightbox" href={b.src}>
                  <img src={b.src} alt={b.caption} loading="lazy" data-caption={b.caption} />
                  <div class="caption-overlay">
                    <h3>{b.caption}</h3>
                  </div>
                </a>
              </div>
            </article>
          );
        }
        const photo = mapSingle(item);
        // Map size to variant names
        let variant = 'regular';
        if (photo.size === 'landscape') variant = 'wide';
        else if (photo.size === 'xlportrait') variant = 'wide_tall';
        else if (photo.size === 'portrait') variant = 'regular';
        
        return (
          <article class={`masonry-item ${variant}`} data-idx={index}>
            <a class="masonry-link portfolio-lightbox" href={photo.src}>
              <img 
                src={photo.src} 
                alt={photo.caption}
                loading="lazy"
                data-caption={photo.caption}
                data-variant={variant}
              />
              <div class="caption-overlay">
                <h3>{photo.caption}</h3>
              </div>
            </a>
          </article>
        );
      })}
    </div>
  </div>
</MainLayout>

<style>
/* Portfolio container - full width with top spacing for navbar */
.portfolio-wrap {
  position: relative;
  margin: 0;
  padding: 120px 0 0 0; /* Top padding to account for fixed navbar with extra padding */
  width: 100%;
}

/* Masonry Container */
.masonry-items {
  position: relative;
  width: 100%;
  margin: 0 auto;
  padding: 0;
  min-height: 500px; /* Prevent collapse */
}

/* Base masonry item */
.masonry-item {
  box-sizing: border-box;
  padding: 0;
  opacity: 0;
  transform: translateY(12px);
  position: absolute;
  overflow: hidden;
}

.masonry-item.animated-in {
  opacity: 1;
  transform: translateY(0);
  transition: opacity .35s ease, transform .35s ease;
}

/* Packery requires a sizer for percentPosition math */
.grid-sizer {
  width: 320px;
}

/* Size variants */
.masonry-item.regular {
  width: 320px;
}

.masonry-item.wide {
  width: 648px; /* 2 columns (320*2) + gap (8) */
}

.masonry-item.wide_tall {
  width: 648px; /* 2 columns (320*2) + gap (8) */
}

/* Responsive sizing */
@media only screen and (max-width: 1300px) {
  .grid-sizer,
  .masonry-item.regular {
    width: 25%;
  }
  .masonry-item.wide,
  .masonry-item.wide_tall {
    width: 50%;
  }
  
  /* Scale heights proportionally */
  .masonry-item.regular,
  .masonry-item.wide {
    height: 350px !important;
  }
  .masonry-item.wide_tall {
    height: 708px !important; /* Double height + 8px gap */
  }
}

@media only screen and (max-width: 768px) {
  .grid-sizer,
  .masonry-item.regular {
    width: 50%;
  }
  .masonry-item.wide,
  .masonry-item.wide_tall {
    width: 100%;
  }
  
  /* Further scale heights */
  .masonry-item.regular,
  .masonry-item.wide {
    height: 300px !important;
  }
  .masonry-item.wide_tall {
    height: 608px !important; /* Double height + 8px gap */
  }
}

@media only screen and (max-width: 480px) {
  .grid-sizer,
  .masonry-item.regular,
  .masonry-item.wide,
  .masonry-item.wide_tall {
    width: 100%;
  }
  
  /* Mobile heights */
  .masonry-item.regular,
  .masonry-item.wide {
    height: 400px !important;
  }
  .masonry-item.wide_tall {
    height: 808px !important; /* Double height + 8px gap */
  }
}

/* Images */
.masonry-item img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 0;
  transition: transform 0.45s cubic-bezier(0.3, 0.1, 0.3, 1);
}

/* Set fixed heights for consistent display */
.masonry-item.regular {
  height: 480px !important; /* Standard height */
}

.masonry-item.wide {
  height: 480px !important; /* Same height as regular */
}

.masonry-item.wide_tall {
  height: 968px !important; /* Double height (480*2 + 8px gap) */
}

.masonry-item a {
  display: block;
  width: 100%;
  height: 100%;
}

/* Stacked pair special handling */
.masonry-item .stacked-pair {
  display: flex;
  flex-direction: column;
  gap: 8px;
  height: 100%;
}

.masonry-item .stacked-pair a {
  display: block;
  overflow: hidden;
  flex: 1;
  height: calc(50% - 4px); /* Each image gets half height minus half gap */
}

.masonry-item .stacked-pair img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* Caption overlay */
.masonry-item a {
  position: relative;
}

.caption-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: linear-gradient(to top, rgba(0,0,0,0.8), transparent);
  color: white;
  padding: 20px;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.caption-overlay h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 500;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}

/* Hover effects */
.masonry-item:hover img {
  transform: scale(1.07);
}

.masonry-item:hover .caption-overlay {
  opacity: 1;
}
</style>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox';
  import 'photoswipe/style.css';
  import Packery from 'packery';
  import imagesLoaded from 'imagesloaded';
  
  document.addEventListener('DOMContentLoaded', function() {
    const container = document.querySelector('#masonry');
    if (!container) return;
    
    // Initialize Packery directly (not as Isotope plugin)
    const pckry = new Packery(container, {
      itemSelector: '.masonry-item',
      columnWidth: '.grid-sizer',
      gutter: 8,
      percentPosition: false,
      transitionDuration: '0.35s',
      stagger: 30,
      resize: true,
      initLayout: false, // Don't layout immediately
      horizontal: false, // Vertical layout for better gap filling
      originLeft: true,
      originTop: true
    });
    
    // Layout after images load
    imagesLoaded(container, function() {
      pckry.layout();
      
      // Packery's shiftLayout method fills gaps better
      pckry.shiftLayout();
      
      // Sort items to fill gaps - move smaller items to fill holes
      const items = pckry.getItemElements();
      
      // Fit each item to fill available gaps
      items.forEach(item => {
        pckry.fit(item);
      });
      
      // Final layout pass
      pckry.layout();
      
      // Add animation classes
      const allItems = container.querySelectorAll('.masonry-item');
      allItems.forEach((item, i) => {
        setTimeout(() => {
          item.classList.add('animated-in');
        }, i * 60);
      });
    });
    
    // Also layout as each image loads for progressive rendering
    imagesLoaded(container).on('progress', function() {
      pckry.shiftLayout();
    });
    
    // Relayout on resize
    let resizeTO;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTO);
      resizeTO = setTimeout(() => {
        pckry.layout();
        pckry.shiftLayout();
      }, 100);
    });
    
    // Initialize PhotoSwipe Lightbox
    const lightbox = new PhotoSwipeLightbox({
      gallery: '.masonry-items',
      children: '.portfolio-lightbox',
      pswpModule: () => import('/node_modules/photoswipe/dist/photoswipe.esm.js'),
      padding: { top: 20, bottom: 20, left: 20, right: 20 },
      wheelToZoom: true,
      imageClickAction: 'close',
      tapAction: 'toggle-controls',
      doubleTapAction: 'zoom',
      preloaderDelay: 0
    });
    
    // Dynamically set image dimensions
    lightbox.addFilter('itemData', (itemData, index) => {
      const linkEl = itemData.element;
      const imgEl = linkEl.querySelector('img');
      
      if (imgEl) {
        // Use natural dimensions or fallback
        itemData.w = imgEl.naturalWidth || 1600;
        itemData.h = imgEl.naturalHeight || 1200;
        itemData.alt = imgEl.alt;
        itemData.title = imgEl.dataset.caption || imgEl.alt;
      }
      
      return itemData;
    });
    
    lightbox.init();
  });
</script>
