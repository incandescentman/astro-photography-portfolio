---
import fs from 'fs';
import path from 'path';
import MainLayout from '../layouts/MainLayout.astro';

// Get the highlights photos (downloaded from live site)
const highlightsDir = path.join(process.cwd(), 'public/highlights');
const highlightPhotos = [];

if (fs.existsSync(highlightsDir)) {
  const imageFiles = fs.readdirSync(highlightsDir).filter(f => /\.(jpg|jpeg|png|webp)$/i.test(f));
  
  // Define specific captions for the live photos
  const captions = {
    'dixit_nobel-physics.jpg': 'Nobel Prize in Physics Ceremony',
    'vanessa-kirby.jpg': 'Vanessa Kirby',
    'Lisa_Gilroy_at_SXSW_in_2025-1.jpg': 'Lisa Gilroy at SXSW in 2025',
    'jay-dixit_red-carpet_01130.jpg': 'Jay Dixit on the Red Carpet',
    'jeremy.jpg': 'Jeremy',
    'jeremy-11.jpg': 'Jeremy',
    'judd-apatow.jpg': 'Judd Apatow',
    'jeremy-3.jpg': 'Jeremy',
    'vinod.jpg': 'Vinod',
    'conan.jpg': 'Conan O\'Brien',
    'jay-dixit_red-carpet_05923-1.jpg': 'Jay Dixit Red Carpet',
    'jeremy-6.jpg': 'Jeremy',
    'jeremy-4.jpg': 'Jeremy',
    'vinod-4.jpg': 'Vinod'
  };
  
  imageFiles.forEach(file => {
    highlightPhotos.push({
      src: `/highlights/${file}`,
      filename: file,
      caption: captions[file] || path.parse(file).name,
      tags: ['featured', 'highlights']
    });
  });
}
---

<MainLayout>
  <div class="photo-grid-container">
    <div class="photo-grid" id="masonry-grid">
      {highlightPhotos.map((photo, index) => {
        // Create varied sizes - some wide, some tall, some small, some large
        let sizeClass = '';
        if (index % 7 === 0) sizeClass = 'wide-tall';
        else if (index % 5 === 0) sizeClass = 'wide-short';
        else if (index % 4 === 1) sizeClass = 'tall';
        else if (index % 6 === 2) sizeClass = 'wide';
        else if (index % 8 === 3) sizeClass = 'small';
        else sizeClass = 'medium';
        
        return (
          <div class={`photo-item ${sizeClass}`}>
            <a href={photo.src} data-gallery="main-gallery">
              <img 
                src={photo.src} 
                alt={photo.caption}
                loading="lazy"
                class="photo-image"
              />
            </a>
          </div>
        );
      })}
    </div>
  </div>
</MainLayout>

<style>
.photo-grid-container {
  padding: 10px;
  margin: 0 auto;
  max-width: 1400px;
}

.photo-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  grid-gap: 10px;
  grid-auto-rows: 10px;
  margin: 0;
}

@media (min-width: 640px) {
  .photo-grid {
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  }
}

@media (min-width: 1024px) {
  .photo-grid {
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
}

.photo-item {
  overflow: hidden;
  cursor: pointer;
}

/* Different sizes for true masonry */
.photo-item.small {
  grid-row-end: span 20;
  grid-column-end: span 1;
}

.photo-item.medium {
  grid-row-end: span 30;
  grid-column-end: span 1;
}

.photo-item.tall {
  grid-row-end: span 45;
  grid-column-end: span 1;
}

.photo-item.wide {
  grid-row-end: span 25;
  grid-column-end: span 2;
}

.photo-item.wide-short {
  grid-row-end: span 20;
  grid-column-end: span 2;
}

.photo-item.wide-tall {
  grid-row-end: span 40;
  grid-column-end: span 2;
}

.photo-image {
  width: 100%;
  height: 100%;
  display: block;
  object-fit: cover;
  border-radius: 0;
  transition: transform 0.2s ease;
  margin: 0;
  padding: 0;
}

.photo-item:hover .photo-image {
  transform: scale(1.05);
}

/* Match the original site's minimal styling */
body {
  margin: 0;
  padding: 0;
  background: #fff;
}
</style>

<script>
  import GLightbox from 'glightbox';
  
  // Initialize GLightbox
  const lightbox = GLightbox({
    selector: '[data-gallery="main-gallery"]',
    touchNavigation: true,
    loop: true,
    autoplayVideos: false,
    zoomable: true,
    draggable: true,
  });
</script>
