---
const { photoId, className = "" } = Astro.props;
---

<button 
  class={`like-button ${className}`} 
  data-photo-id={photoId}
  data-initial-count="0"
>
  <svg class="heart w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
  </svg>
  <span class="like-count ml-1 text-sm">0</span>
</button>

<style>
.like-button {
  @apply flex items-center px-3 py-1.5 bg-white bg-opacity-90 hover:bg-opacity-100 
         border border-gray-200 rounded-full transition-all duration-200 
         hover:scale-105 active:scale-95 backdrop-blur-sm;
}

.like-button:hover {
  @apply shadow-md;
}

.like-button.liked {
  @apply bg-red-500 text-white border-red-500;
}

.like-button.liked .heart {
  @apply animate-pulse;
}
</style>

<script>
class PhotoLikeButton extends HTMLElement {
  constructor() {
    super();
    this.photoId = this.dataset.photoId;
    this.likeCount = this.querySelector('.like-count');
    this.heart = this.querySelector('.heart');
    this.isLiked = false;
    this.currentCount = 0;
    
    this.addEventListener('click', this.handleLike.bind(this));
    this.loadLikeStatus();
  }

  async loadLikeStatus() {
    try {
      // Load from localStorage for now (TODO: Replace with Supabase)
      const localLikes = JSON.parse(localStorage.getItem('photoLikes') || '{}');
      const photoData = localLikes[this.photoId] || { count: 0, liked: false };
      
      this.currentCount = photoData.count;
      this.isLiked = photoData.liked;
      this.updateUI();
      
      // TODO: Fetch from Supabase
      // const response = await fetch(`/api/likes/${this.photoId}`);
      // const data = await response.json();
      // this.currentCount = data.count;
      // this.updateUI();
    } catch (error) {
      console.error('Error loading like status:', error);
    }
  }

  async handleLike(e) {
    e.stopPropagation();
    e.preventDefault();
    
    try {
      this.isLiked = !this.isLiked;
      this.currentCount += this.isLiked ? 1 : -1;
      this.currentCount = Math.max(0, this.currentCount);
      
      this.updateUI();
      await this.saveLikeStatus();
      
      // Add visual feedback
      this.classList.add('animate-bounce');
      setTimeout(() => this.classList.remove('animate-bounce'), 300);
      
    } catch (error) {
      console.error('Error handling like:', error);
      // Revert on error
      this.isLiked = !this.isLiked;
      this.currentCount += this.isLiked ? 1 : -1;
      this.updateUI();
    }
  }

  async saveLikeStatus() {
    try {
      // Save to localStorage for now (TODO: Replace with Supabase)
      const localLikes = JSON.parse(localStorage.getItem('photoLikes') || '{}');
      localLikes[this.photoId] = { 
        count: this.currentCount, 
        liked: this.isLiked 
      };
      localStorage.setItem('photoLikes', JSON.stringify(localLikes));
      
      // TODO: Save to Supabase
      // await fetch(`/api/likes/${this.photoId}`, {
      //   method: 'POST',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify({ action: this.isLiked ? 'like' : 'unlike' })
      // });
    } catch (error) {
      console.error('Error saving like status:', error);
    }
  }

  updateUI() {
    this.likeCount.textContent = this.currentCount;
    this.classList.toggle('liked', this.isLiked);
  }
}

// Register the custom element
customElements.define('photo-like-button', PhotoLikeButton);
</script>