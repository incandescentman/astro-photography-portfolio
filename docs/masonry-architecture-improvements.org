#+TITLE: Masonry & Architecture Enhancements
#+DATE: 2025-10-03

* Configuration Opportunities

** Shared Masonry Options
- Consolidate Packery, Isotope, and fallback settings into a single ~masonry.config.ts~ consumed by ~src/pages/index.astro~ and ~src/scripts/masonry.ts~ so breakpoints, gutters, and variants stay aligned.
- Expose per-gallery overrides via frontmatter or YAML keys instead of hard-coded values, letting editors tweak layout density without code changes.

** Breakpoint Governance
- Source breakpoint tokens from ~tailwind.config.js~ (or a co-located ~breakpoints.ts~) and import them where client scripts reference ~matchMedia~, ensuring CSS and JS stay in sync when responsive thresholds shift.
- Document the mobile fallback threshold alongside the CSS snippet to avoid drift between style rules and runtime checks.

** Metadata Centralization
- Store masonry variants, captions, and ordering metadata in a canonical YAML/JSON (e.g., ~src/data/galleryData.ts~ loader) so both Packery and CSS-grid galleries derive spans from the same source.
- Generate derived fields (like width multipliers) during the build step (~npm run generate~) to keep runtime scripts lightweight.

* Architecture Opportunities

** Reusable Masonry Initializer
- Refactor the bespoke Packery setup inside ~src/pages/index.astro~ to wrap the shared ~initMasonry~ helper, extending it with admin hooks rather than duplicating layout math.
- Move progressive-reveal logic into the shared script behind an option flag so both homepage and gallery routes benefit from uniform loading behaviour.

** Admin Mode Isolation
- Extract admin-only helpers (toolbar factory, inline editor, Draggabilly bindings) into ~src/scripts/masonry-admin.ts~ and lazy-load them when ~?admin=true~ to reduce baseline bundle size.
- Gate localStorage writes and server POSTs behind a small state machine to prevent duplicate persistence when Packery is disabled (e.g., mobile view).

** Runtime Capability Detection
- Introduce a lightweight ~useMasonryController~ utility that instantiates Packery only when the viewport exceeds the breakpoint and the browser supports required APIs, falling back gracefully otherwise.
- Wire the controller to ~matchMedia~ change events so rotating a mobile device can opt-in/out of Packery without a full reload.

* Observability & Safety Nets

** Telemetry Hooks
- Emit custom events when sequence saves or metadata edits occur; surface them via ~logs/~ or a small analytics endpoint to monitor admin tool usage.
- Capture Packery layout errors (try/catch around ~pckry.layout/~) and report via ~console.warn~ or a toast so editors notice when layout silently fails.

** Testing Strategy
- Add Vitest suites around the shared masonry config generator to lock in breakpoints, gutter math, and variant mappings as they evolve.
- Include a Playwright smoke test that snaps the homepage at desktop and mobile widths to catch regression gaps in the flex fallback.

* Implementation Notes
- Homepage Packery script now lives in ~src/scripts/packeryGallery.ts~ and exposes ~initPackeryGallery~ so routes can opt into the same layout behaviour with or without admin tooling.
- Dynamic gallery route (~src/pages/gallery/[...folder].astro~) now renders ~.masonry-item~ articles and invokes the shared initializer; search/tag filters toggle items and trigger Packery relayout.
