#+TITLE: Work Log - Jay Dixit Photography Portfolio
#+DATE: 2025-10-12

* 2025-10-21 - KNOWN GOOD STATE ✅ (Production-Ready Baseline)
** Status: ✅✅✅ STABLE - VERIFIED WORKING - USE THIS AS REFERENCE
** Tag: stable-known-good
** Commit: ceb58ab

This is THE canonical known good state. Masonry is confirmed working perfectly.
All design enhancements are applied and stable. Use this as the baseline for
any future experiments or changes.

** What's Working
- Masonry grid layout fully functional (Packery with 8px gaps)
- Edge-to-edge layout (no container padding)
- Square corners on images (no border-radius)
- Captions displaying correctly as overlays on hover

** Design Enhancements Applied
*** Color Palette
- Warmer background: #fafafa (neutral-50) instead of pure white
- Neutral color scale: neutral-50 through neutral-900
- Better foreground colors: deeper, richer blacks

*** Shadows & Depth
- Refined shadow system: shadow-sm-refined through shadow-xl-refined
- Layered, subtle shadows with reduced opacity
- Applied to nav, search inputs, interactive elements

*** Interaction Refinements
- Hover overlay: Gradient (0% → 30% → 70%) instead of solid
- Zoom effect: Gentler scale(1.03) instead of scale(1.07)
- Transitions: Smoother 0.6s cubic-bezier easing
- Caption typography: clamp() fluid sizing, lighter weight (500)

*** UI Components
- Navigation: Enhanced glassmorphism (backdrop-blur-xl)
- Search input: shadcn-style rounded-xl with better focus states
- Tag pills: Black active state (neutral-900) instead of blue
- Footer: Subtle background with backdrop-blur
- Social icons: Rounded hover backgrounds

*** Typography
- Improved hierarchy with proper tracking-tight
- Better line-height and letter-spacing
- Fluid typography using clamp()

** Spacing (Reverted to Original)
- Masonry gap: 8px (tight, original spacing)
- Container: Edge-to-edge (no side padding)
- Images: Square corners (no border-radius)

** Files Modified
- src/styles/global.css
- src/pages/index.astro
- src/pages/gallery/[...folder].astro
- src/components/NavBar.astro
- src/components/Footer.astro
- src/components/SocialIcon.astro

** Reference
See docs/feature-ideas/design-enhancements-2025-10.org for full proposal.

* 2025-10-12 - Failed Attempt at Dynamic Aspect Ratios
** Goal
- Refactor the homepage gallery to use dynamic, natural aspect ratios for all images, enabling a true edge-to-edge layout.

** Changes Made
- A script was created to generate a metadata file (`image-metadata.json`) containing the true dimensions of all images.
- The homepage was modified to use this metadata to drive the layout, replacing the old fixed-height CSS with a dynamic aspect-ratio system.
- This involved passing the real image dimensions to the Astro `<Image>` component and removing several layers of conflicting CSS.

** Outcome: FAILURE
- The refactoring has resulted in a broken layout.
- Captions, intended as overlays, are now visible by default and rendered below their corresponding image.
- This incorrectly increases the height of each masonry item, creating large vertical gaps in the Packery grid and making the layout unusable.

** Analysis
- The root cause is a complex and persistent CSS layout issue. Despite multiple attempts, the caption overlay (`.caption-overlay`) is not being correctly positioned over the image.
- It is behaving as if it is part of the normal document flow rather than being absolutely positioned relative to its container.
- The interaction between the Astro `<Image>` component (which generates its own wrapper elements) and the parent `<a>` tag (which must act as the positioning context) is proving difficult to resolve.
- Further attempts to fix this with small CSS changes have failed. A more fundamental solution is required.
- *Update*: A subsequent attempt to fix the overlay using a modern CSS Grid approach (`display: grid` and `grid-area`) also failed, with no change in the broken behavior. This indicates the issue is not a simple positioning context problem.

* 2025-10-05 - Packery Bundle Regression
** Symptoms
- Vercel build succeeded, but production requested ~/src/scripts/packeryGallery.ts~ directly and hit a 404, leaving the gallery empty.
- Browser console showed ~GET https://photos-jaydixit.vercel.app/src/scripts/packeryGallery.ts net::ERR_ABORTED 404 (Not Found)~ on both the homepage and folder routes.
** Fix
- Replaced inline ~<script type="module">~ imports with hoisted scripts so Astro includes ~src/scripts/packeryGallery.ts~ in the build output.
- Updated ~src/pages/index.astro~ and ~src/pages/gallery/[...folder].astro~ to ~import initPackeryGallery from '../scripts/packeryGallery.ts'~ and ~../../scripts/packeryGallery.ts~ respectively.
- Confirmed ~npm run build~ now emits ~dist/_astro/packeryGallery.*.js~, and masonry renders again in production.
** Notes
- Avoid ~Astro.resolve~ for client helpers; use hoisted scripts or frontmatter imports so the bundler owns the dependency graph.
- Keep an eye on future refactors that move shared scripts—mixed absolute and relative imports can mask bundling gaps during dev.
- Follow-up: redeploy to Vercel after each bundling-related change to confirm the CDN serves the hydrated assets.

* 2025-10-05 - Edge-to-Edge Attempts Retrospective
** Goal
- Make the homepage masonry appear full-bleed without breaking the stable Packery layout (four 320px columns + gutters)
** Attempts (All Reverted)
- *Clamp padding on `.portfolio-wrap`* (e.g., `padding: 120px clamp(16px, 4vw, 40px)`): kept four columns centered but always left ~24px white on the right at large viewports because Packery still anchored columns to 320px widths.
- *Enable `fitWidth` + flex centering*: Packery shrank the grid to a single column, producing massive black gutters; unusable on desktop.
- *Pseudo-element curtains on `.gallery-stage`*: Added black panels with `::before/::after`, but a white sliver persisted (column width still fixed). Tweaking widths shifted the white space around without achieving true edge-to-edge.
- *Dynamic padding-inline stage* (`padding-inline: max(0, (100vw - 1304px) / 2)`): created mismatched white/black margins (e.g., 350px white right gutter + 212px black) since Packery columns remained 320px wide.
- *Black background on `.portfolio-wrap`* with white masonry inset: magnified the visible white border (372px) because the grid width never changed.
** Takeaway
- Packery’s fixed column widths + hard-coded heights are the blocking constraint. Without recomputing heights from real image aspect ratios, any attempt to widen columns or stretch the container will crop heads or deform the layout.
- Next viable path: precompute aspect ratios (e.g., via `sharp`) and use them to set per-item heights before Packery initializes; once height/width pairs reflect actual assets, we can revisit edge-to-edge or add an extra column.
** Recommendation
- Prototype aspect-aware sizing in a feature branch, validate against live data, then update documentation if the approach succeeds.

* 2025-10-05 - Homepage Framing Tweaks
** Motivation
- With Packery widths restored, the homepage still felt slightly offset compared to the nav + footer chrome.
- Goal: add symmetric gutters without shrinking the masonry columns back down or reintroducing the head-cropping issue.
** Changes
- Wrapped the gallery in a ~clamp(12px, 3vw, 28px)~ horizontal padding so large screens see just a sliver of whitespace while tablets get comfortable breathing room.
- Left column widths untouched (320px/648px) so Packery layouts and saved admin order remain 1:1 with the historical baseline.
- Confirmed ~npm run build~ after the tweak.
** Notes
- The clamp values live in ~src/pages/index.astro:432~; drop the minimum below ~12px~ if you truly want edge-to-edge.
- Any future responsive experiments should tweak this padding first before touching Packery column math.

* 2025-10-03 - Vercel Deployment & Mobile Optimization

** Vercel Configuration
*** Initial Setup
- Configured project for Vercel static deployment
- Fixed build issues:
  - Changed API endpoint =save-order.ts= from =prerender: false= to =prerender: true=
  - Removed empty placeholder image files that broke build
  - Resolved conflicting gallery routes (=[folder].astro= vs =[...folder].astro=)
  - Fixed =getStaticPaths= to return string paths instead of arrays for catch-all routes
  - Temporarily disabled =wikiportraits-story.mdx= (image import issue)

*** Git Integration
- Connected Vercel project to GitHub repository =incandescentman/photos-jaydixit=
- Enabled automatic deployments on push to =main= branch
- Added custom domain =photos.jaydixit.com= (DNS configuration pending)

** Mobile Display Optimization
*** Problem
Mobile view had significant issues:
- Photos were cropped (=object-fit: cover=)
- Large white gaps between photos
- Fixed heights didn't respect image aspect ratios

*** Solution
Changed mobile layout from Packery masonry to flexbox:
- Disabled Packery absolute positioning on mobile (<480px)
- Switched to =display: flex= with =flex-direction: column=
- Set images to =object-fit: contain= with =height: auto=
- Result: One photo per row, full width, no cropping, no gaps

** Performance Optimization
*** Problem
Initial page load was very slow (5-10 seconds of blank screen):
- =imagesLoaded()= waited for ALL images to fully download
- Only then did photos fade in with staggered animation
- Poor perceived performance

*** Solution - Progressive Image Loading
Implemented progressive reveal strategy:
- Show images as soon as each one loads (not after all load)
- Use =imagesLoaded().on('progress')= to trigger individual animations
- Reduced stagger timing from 60ms to 40ms
- Layout updates incrementally with =pckry.shiftLayout()=
- Result: First images visible in ~1 second instead of 5-10 seconds

*** Technical Implementation
#+begin_src javascript
// Before: Wait for all images, then animate
imagesLoaded(container, function() {
  allItems.forEach((item, i) => {
    setTimeout(() => item.classList.add('animated-in'), i * 60);
  });
});

// After: Animate each image as it loads
imagesLoaded(container).on('progress', function(instance, image) {
  const item = image.img.closest('.masonry-item');
  setTimeout(() => item.classList.add('animated-in'), loadedCount * 40);
  pckry.shiftLayout();
});
#+end_src

** Key Decisions
1. *Static deployment over SSR* - Chose Vercel static output for simplicity and performance
2. *Flexbox on mobile* - Abandoned Packery masonry on mobile in favor of natural document flow
3. *Progressive loading* - Prioritized perceived performance over perfect layout timing
4. *Object-fit contain* - Full image display over cropped composition on mobile

** Files Changed
- =src/pages/index.astro= - Mobile CSS and progressive loading logic
- =src/pages/api/save-order.ts= - Changed to =prerender: true=
- =src/pages/gallery/[...folder].astro= - Fixed getStaticPaths
- =vercel.json= - Deployment configuration (already existed)
- =.vercel/= - Auto-generated deployment metadata

** Deployment URLs
- *Production*: https://photos-jaydixit-79enk9mo3-incandescentmans-projects.vercel.app
- *Custom Domain*: https://photos.jaydixit.com (pending DNS configuration)
- *Vercel Dashboard*: https://vercel.com/incandescentmans-projects/photos-jaydixit

* 2025-10-03 - Masonry Implementation Review

** Overview
- Home page masonry lives in ~src/pages/index.astro~ with ~Packery~ orchestrating absolute-positioned ~.masonry-item~ articles.
- Each item carries a variant class (~regular~/~wide~/~wide_tall~) and a ~.grid-sizer~ of 320px anchors Packery's column math.
- Mobile (<480px) forces a flex-column fallback with ~object-fit: contain~ so small screens bypass Packery entirely.
- Catch-all gallery page (~src/pages/gallery/[...folder].astro~) implements a CSS-grid masonry variant with ~grid-auto-rows: 10px~ and span-based sizing.

** Index Page Details (~src/pages/index.astro~)
- Layout CSS assigns fixed heights (~480px~ regular, ~968px~ wide_tall) using ~!important~, so Packery crops via ~object-fit: cover~ rather than respecting natural ratios.
- The script initializes ~Packery~ directly (~initLayout: false~, ~stagger: 30~) and drives progressive reveal with ~imagesLoaded().on('progress')~ plus ~pckry.shiftLayout()~.
- Admin mode injects a toolbar, toggles edit affordances, and wires ~Draggabilly~ handles for drag-to-resequence with autosave into ~localStorage~ and POSTs to ~/api/save-order~.
- Observed quirks:
  - Inline helpers test ~window.pckry~ but never assign ~window.pckry = pckry~; use the closure-bound instance instead.
  - ~applySize(newSize)~ never runs because ~sizeInput~ was removed; replace the guard with the segmented control (~sizeGroup~) so variant classes update when saving.
  - Fixed-height CSS conflicts with any future height normalization attempts (inline JS cannot override ~!important~ styles).

** Gallery Catch-all (~src/pages/gallery/[...folder].astro~)
- Uses CSS grid for pseudo-masonry: variant classes (~small~/~medium~/~tall~/~wide~…) come from array index patterns, not actual asset metadata.
- Search + tag filters hide items by toggling a ~hidden~ class; likes persist in ~localStorage~ (Supabase TODO noted).
- GLightbox powers detail view; no Packery/Isotope present here.

** Shared Masonry Script (~src/scripts/masonry.ts~)
- Provides an ~initMasonry~ helper mirroring Salient's Isotope+Packery combo with elastic column tiers, gutter fudge, staggered reveals, and filter hooks.
- Currently unused on the main page; consider consolidating bespoke ~index.astro~ logic into this module for reuse across galleries.

** Follow-ups / Questions
- Fix admin size editor so saved variants immediately reflow (~applySize~ guard) and consider exposing inline width/height adjustments without ~!important~ locks.
- Decide whether Packery should remain page-specific or whether to adopt the shared ~initMasonry~ helper for consistency.
- Evaluate if gallery CSS-grid variant should derive spans from actual image dimensions or YAML metadata for predictable layout.
- When enabling admin mode, ensure PhotoSwipe links remain disabled during drags (current pointer-event toggle works, but confirm after fixes).

** Verification Checklist
- ~npm run dev~ → visit the home page masonry and inspect Packery column widths, staggered reveal, and admin drag mode.
- Resize below 480px to confirm flex fallback removes absolute positioning and preserves full-image display.
- Visit a folder route (~/gallery/<slug>~) to confirm CSS-grid masonry, tag filters, and lightbox behaviour.
- Run ~npm run build~ periodically to catch any Packery/Draggabilly SSR warnings before deployment.

* 2025-10-03 - Packery Consolidation & Mobile Fixes

** Shared Helper
- Extracted bespoke homepage logic into ~src/scripts/packeryGallery.ts~, exposing ~initPackeryGallery~ for reuse across pages.
- Module handles mobile fallback, order restoration, admin toolbar + popover editing, Draggabilly binding, and PhotoSwipe setup.
- Assigned instance to ~window.pckry~ inside the helper so legacy checks remain valid.
- Lazy-loaded Draggabilly inside ~setupPackeryLifecycle~ so admin drag features ship only when needed, keeping baseline bundle smaller.

** Page Integrations
- Homepage now imports the helper via ~import initPackeryGallery from '/src/scripts/packeryGallery.ts';~ (
  absolute path ensures Vite bundles correctly), replacing the 800+ line inline script.
- Catch-all gallery route renders the same ~.masonry-item~ markup/styling and invokes the helper with admin tooling disabled.
- Search + tag filters call Packery ~layout()/shiftLayout()~ after toggling ~display~, keeping the grid gapless.

** Mobile Improvements
- Fallback branch forces flex-column layout on the container and overrides desktop ~!important~ heights using ~style.setProperty(..., 'important')~ so cards expand to full height without whitespace.
- Images switch to ~object-fit: contain~ at narrow widths; gap tightened to 8px for consistent vertical rhythm.
- Auto-applied ~animated-in~ class on mobile so cards become visible even without Packery transitions.

** DX Notes
- Added `/src/...` import guidance and mobile height override lessons to ~docs/codebase-wisdom.org~ to prevent future 404s/gaps.
- New checklist item: verify frontend helpers use absolute imports and pass ~npm run build~ before landing.
- Replaced admin toolbar inline styles with CSS injected via ~injectAdminToolbarStyles()~, making future tweaks easier.

* 2025-10-04 - Journal / Blog Rollout

** Content Pipeline
- Added ~blog~ content collection with schema for Cloudinary public IDs so posts inherit the existing `t_gallery` transform.
- Seeded `hello-world.mdx` sample entry that references real red-carpet imagery hosted on Cloudinary.

** Templates
- New listing view at ~src/pages/blog/index.astro~ mirrors the Socratic layout: hero card, smart-quoted excerpts, responsive Cloudinary hero via ~@jaydixit/astro-utils/components/Image.astro~.
- Detail page (~src/pages/blog/[slug].astro~) renders hero figure, SEO-friendly excerpt, tags, and clears the fixed nav with generous top padding.

** Shared Utilities
- Imported ~@jaydixit/astro-utils/styles/blocks.css~ for blockquote/prompt styling parity and wired ~smartQuotes~ for frontmatter excerpts.
- Cloudinary helpers from ~src/lib/cloudinary.ts~ now service the journal, complementing the gallery system.

** Navigation & Styling
- NavBar adds a “Journal” link; blog sections receive top padding so the fixed header no longer obscures the intro label.

** Validation
- ~npm run build~ (passes; existing album collection warnings unchanged).

* 2025-10-05 - Gallery Asset Pipeline Alignment

** Asset Migration
- Relocated filesystem-driven galleries from ~public/photos/~ into ~src/gallery/photos/~ so Astro’s optimizer can fingerprint originals and emit responsive variants.
- Catch-all gallery page now glob-imports the new source tree, derives captions/tags centrally, and renders each item through ~Image~ metadata with hashed lightbox targets.

** Listing & Tooling
- Gallery index rebuilds its cards from the updated metadata pool and serves optimized thumbnails instead of raw ~img~ tags.
- Upload-to-Commons admin view swaps to Astro-provided preview URLs while generating absolute source paths under the new directory for uploader scripts.

** Validation
- ~npm run lint~
- ~npm run build~
